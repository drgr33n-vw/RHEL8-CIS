---
- name: Setup the audit
  ansible.builtin.include_tasks: LE_audit_setup.yml
  when:
    - setup_audit
  tags:
    - setup_audit

- name: "Ensure {{ audit_conf_dir }} exists"
  ansible.builtin.file:
    path: "{{ audit_conf_dir }}"
    state: directory
    mode: '0755'

- name: If using git for content set up
  block:
    - name: Install git (rh8 python3)
      ansible.builtin.package:
        name: git
        state: present
      when: ansible_distribution_major_version == 8

    - name: Install git (rh7 python2)
      ansible.builtin.package:
        name: git
        state: present
      vars:
        ansible_python_interpreter: "{{ python2_bin }}"
      when: ansible_distribution_major_version == 7

    - name: retrieve audit content files from git
      ansible.builtin.git:
        repo: "{{ rhel8cis_audit_file_git }}"
        dest: "{{ audit_conf_dir }}"
        version: "{{ rhel8cis_audit_git_version }}"
  when:
    - audit_content == 'git'

- name: copy to audit content files to server
  ansible.builtin.copy:
    src: "{{ rhel8cis_audit_local_copy }}"
    dest: "{{ audit_conf_dir }}"
    mode: 0644
  when:
    - audit_content == 'copy'

- name: get audit content from url
  ansible.builtin.get_url:
    url: "{{ rhel8cis_audit_files_url }}"
    dest: "{{ audit_conf_dir }}"
  when:
    - audit_content == 'get_url'

- name: Check Goss is available
  block:
    - name: Check for goss file
      ansible.builtin.stat:
        path: "{{ audit_bin }}"
      register: goss_available

    - name: If audit ensure goss is available
      ansible.builtin.assert:
        msg: "Audit has been selected: unable to find goss binary at {{ audit_bin }}"
      when:
        - not goss_available.stat.exists
  when:
    - run_audit

- name: "Check whether machine is UEFI-based"
  ansible.builtin.stat:
    path: /sys/firmware/efi
  register: rhel8_efi_boot
  tags:
    - goss_template

- name: Copy ansible default vars values to test audit
  ansible.builtin.template:
    src: ansible_vars_goss.yml.j2
    dest: "{{ audit_vars_path }}"
    mode: 0600
  when:
    - run_audit
  tags:
    - goss_template

- name: "Run pre_remediation {{ benchmark }} audit"
  goss:
    goss_path: "{{ audit_bin }}"
    path: "{{ goss_file }}"
    vars_path: "{{ audit_vars_path }}"
    format: "{{ audit_format }}"
    output_file: "{{ pre_audit_outfile }}"
  failed_when: false
  environment:
    GOSS_FMT_OPTIONS: Pretty

- name: Capture audit data if json format
  block:
    - name: "capture data {{ pre_audit_outfile }}"
      ansible.builtin.command: "cat {{ pre_audit_outfile }}"
      register: pre_audit
      changed_when: false

    - name: Capture pre-audit result
      ansible.builtin.set_fact:
        pre_audit_summary: "{{ pre_audit.stdout | from_json |json_query(summary) }}"
      vars:
        summary: 'summary."summary-line"'
  when:
  - audit_format == "json"

- name: Capture audit data if documentation format
  block:
    - name: "capture data {{ pre_audit_outfile }}"
      ansible.builtin.command: "tail -2 {{ pre_audit_outfile }}"
      register: pre_audit
      changed_when: false

    - name: Capture pre-audit result
      ansible.builtin.set_fact:
        pre_audit_summary: "{{ pre_audit.stdout_lines }}"
  when:
  - audit_format == "documentation"
